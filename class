
import requests

class Rate:
    def __init__(self, format_='value', check='True'):
        self.format = format_
        self.check = check
    
    def exchange_rates(self):
        r = requests.get('https://www.cbr-xml-daily.ru/daily_json.js')
        return r.json()['Valute']
    
    def diff(self, check):
        self.check=check
    
    def make_format(self, currency):
        response = self.exchange_rates()
        if currency in response:
            if self.format == 'full':
                return response[currency]
            
            if self.format == 'value':
                if self.check=='True':
                    difference=response[currency]['Previous']-response[currency]['Value']
                    return difference
                else:    
                    return response[currency]['Value']
        
            return 'Error'
    
    def eur(self):
        """Возвращает курс евро на сегодня в формате self.format"""
        return self.make_format('EUR')
    
    def usd(self):
        """Возвращает курс доллара на сегодня в формате self.format"""
        return self.make_format('USD')
    
    def brl(self):
        """Возвращает курс бразильского реала на сегодня в формате self.format"""
        return self.make_format('BRL')
    
    def max_cource(self):
        response = self.exchange_rates()
        max_course=0
        for row in response.values():
            value=row['Value']
            if max_course<=value:
                max_course=value
                name=row['Name']
        print(row['Name'], max_course)

# Задание 1
Rate().max_cource()
# Задание 2
Rate('value', 'False').eur()

# Задание 3 
class Employee:
    def __init__(self, name, seniority, awards):
        self.name = name
        self.seniority = seniority
        self.awards= awards
        
        self.grade = 1
    
    def grade_up(self):
        """Повышает уровень сотрудника"""
        self.grade += 1
    
    def publish_grade(self):
        """Публикация результатов аккредитации сотрудников"""
        print(self.name, self.grade)
class Developer(Employee):
    def __init__(self, name, seniority, awards=0):
        super().__init__(name, seniority, awards=0)
    
    def check_if_it_is_time_for_upgrade(self):
        # для каждой аккредитации увеличиваем счетчик на 1
        # пока считаем, что все разработчики проходят аккредитацию
        self.seniority += 1
        
        # условие повышения сотрудника из презентации
        if self.seniority % 5 == 0:
            self.grade_up()
        
        # публикация результатов
        return self.publish_grade()

class Designer(Employee):
    def __init__(self, name, seniority, awards):
        super().__init__(name, seniority, awards)
        
    def check_if_it_is_time_for_upgrade(self):
        if self.seniority==0: 
            self.seniority=1+self.awards*2
        else:
            self.seniority+=1
        if self.seniority % 7==0:
                self.grade_up()
        
        return self.publish_grade()
    
elena = Designer('Елена', seniority=0, awards=2)

for i in range(20):
    elena.check_if_it_is_time_for_upgrade()
